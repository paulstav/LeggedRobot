function [Fd, Qd] = Disc_Dynamics(f,omega,q,.......
    wf, ww, wbw, wp1, wp2, dt)
%returns the transition matrix and discrete covariance based on van loan's
%method. the scalar part of the quaternion is at the end


%Cq = quat2dcm([q(4) q(1) q(2) q(3)]);
Cq = quaternion2Matrix(q);
%Cq = 2*(scalar*scalar - 1)*eye(3) + 2*(q13*q13') - 2*scalar*skew(q13);

   F = [zeros(3) eye(3) zeros(3) zeros(3) zeros(3)  zeros(3); .........
    zeros(3) zeros(3) -Cq'*skew(f) zeros(3) -Cq'  zeros(3);......
    zeros(3) zeros(3) -skew(omega) zeros(3) zeros(3) -eye(3);.......
    zeros(3) zeros(3) zeros(3) zeros(3) zeros(3) zeros(3);.......
    zeros(3) zeros(3) zeros(3) zeros(3) zeros(3) zeros(3);.......
    zeros(3) zeros(3) zeros(3) zeros(3) zeros(3) zeros(3)];

     G = [zeros(3) zeros(3) zeros(3) zeros(3)  zeros(3);........
    -Cq' zeros(3) zeros(3) zeros(3)  zeros(3);.......
    zeros(3) -eye(3) zeros(3) zeros(3) zeros(3);.....
    zeros(3) zeros(3) Cq' zeros(3) zeros(3);......
    zeros(3) zeros(3) zeros(3) Cq' zeros(3);......
    zeros(3) zeros(3) zeros(3) zeros(3) eye(3)];
    
    W = [wf*eye(3) zeros(3) zeros(3) zeros(3) zeros(3);.......
    zeros(3) ww*eye(3) zeros(3) zeros(3) zeros(3);.....
    zeros(3) zeros(3) wp1*eye(3) zeros(3) zeros(3);.....
    zeros(3) zeros(3) zeros(3)  wp2*eye(3) zeros(3);.......   
    zeros(3) zeros(3) zeros(3) zeros(3) wbw*eye(3)];   
    
%Van Loan's discretization
    M = [-F G*W*G'; zeros(18) F'];

    B = expm(M*dt);
    
    Fd = B(19:36,19:36)';
    Qd = Fd*B(1:18,19:36);  
    
    
end